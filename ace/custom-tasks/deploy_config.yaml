apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-config
spec:
  params:
    - name: is-config-directory
    - name: is-infra-directory
    - name: is-configuration-keystore
    - name: is-configuration-truststore
    - name: is-configuration-setdbparms
    - name: is-configuration-serverconf
    - name: is-configuration-policyproject
    - name: is-configuration-loopbackdatasource
  results:
    - name: configurations
  steps:
    - name: setup-configuration
      image: image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/yq-zip
      workingDir: $(workspaces.workspace.path)
      env:
        - name: IS_CONFIG_DIRECTORY
          value: $(params.is-config-directory)
        - name: IS_INFRA_DIRECTORY
          value: $(params.is-infra-directory)
        - name: IS_CONFIGURATION_KEYSTORE
          value: $(params.is-configuration-keystore)
        - name: IS_CONFIGURATION_TRUSTSTORE
          value: $(params.is-configuration-truststore)
        - name: IS_CONFIGURATION_SETDBPARMS
          value: $(params.is-configuration-setdbparms)
        - name: IS_CONFIGURATION_SERVERCONF
          value: $(params.is-configuration-serverconf)
        - name: IS_CONFIGURATION_POLICYPROJECT
          value: $(params.is-configuration-policyproject)
        - name: IS_CONFIGURATION_LOOPBACKDATASOURCE
          value: $(params.is-configuration-loopbackdatasource)
        - name: WORKSPACE_PATH
          value: $(workspaces.workspace.path)
      script: |
        #!/bin/bash

        set -e

        config_template_path=${WORKSPACE_PATH}/${IS_INFRA_DIRECTORY}/configurations
        rendered_config_directory=${WORKSPACE_PATH}/configurations
        config_definition_path=${WORKSPACE_PATH}/${IS_CONFIG_DIRECTORY}

        create_configurations() {
          local type=$1
          local config=$2

          local sanitised_file_name=$(echo $config | sed 's/\./_/g;s/-/_/g;s/^[[:upper:]]/\L&/;s/[[:upper:]]/\L_&/g')
          local sanitised_config_name=$(echo $config | sed 's/^[[:upper:]]/\L&/;s/_/-/g;s/[[:upper:]]/\L-&/g')

          cp $config_template_path/configuration-with-data.yaml $rendered_config_directory/$sanitised_file_name.yaml
          e=$sanitised_config_name yq e -i '.metadata.name = env(e)' $rendered_config_directory/$sanitised_file_name.yaml
          e=$type yq e -i '.spec.type = strenv(e)' $rendered_config_directory/$sanitised_file_name.yaml

          case $type in
          setdbparms | serverconf)
            contents=$(base64 -w 0 $config_definition_path/$config)
            ;;
          policyproject)
            pushd $config_definition_path > /dev/null
            contents=$(zip -r - $config | base64 -w 0)
            popd > /dev/null
            ;;
          loopbackdatasource)
            pushd $config_definition_path > /dev/null
            contents=$(zip - $config | base64 -w 0)
            popd > /dev/null
            ;;
          esac

          e=$contents yq e -i '.spec.contents = env(e)' $rendered_config_directory/$sanitised_file_name.yaml

          echo $sanitised_config_name
        }

        process_configrations() {
          local config_type=$1

          local configurations=""
          for config in ${!config_type}; do
            if [[ $config_type == IS_CONFIGURATION_KEYSTORE ||  $config_type == IS_CONFIGURATION_TRUSTSTORE ]]; then
              configurations="${configurations} $config"
            else
                local config_pattern='^IS_CONFIGURATION_(.+)'
                if [[ $config_type =~ $config_pattern ]]; then
                  local type=$(echo "${BASH_REMATCH[1]}" | sed -e 's/\(.*\)/\L\1/')
                else
                  echo "unknown config type parameter: $config_type"
                  exit 1
                fi

              create_configurations $type $config
            fi
          done
          echo -n ${configurations## }
        }

        rm -rf $rendered_config_directory
        mkdir -p $rendered_config_directory

        configurations=""

        for config_type in IS_CONFIGURATION_KEYSTORE IS_CONFIGURATION_TRUSTSTORE \
                      IS_CONFIGURATION_SETDBPARMS IS_CONFIGURATION_SERVERCONF \
                      IS_CONFIGURATION_POLICYPROJECT IS_CONFIGURATION_LOOPBACKDATASOURCE; do

          configurations="${configurations} $(process_configrations $config_type)"

        done

        echo -n ${configurations## } > $(results.configurations.path)
    - name: apply-configuration
      image: quay.io/openshift/origin-cli:latest
      workingDir: $(workspaces.workspace.path)
      script: |
        if [[ $(ls -A configurations) ]]; then
          oc apply -f configurations
        fi

  workspaces:
    - name: workspace
