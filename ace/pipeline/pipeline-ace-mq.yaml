apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: is-build-with-mq
spec:
  workspaces:
    - name: shared-workspace

  params:
    - name: is-source-repo-url
    - name: is-source-directory
      default: is-source
    - name: is-source-repo-private-key

    - name: is-infra-repo-url
    - name: is-infra-directory
      default: is-infra
    - name: is-infra-repo-private-key

    - name: is-config-repo-url
    - name: is-config-directory
      default: is-config
    - name: is-config-repo-private-key

    - name: mq-source-repo-url
    - name: mq-source-directory
      default: mq-source
    - name: mq-source-repo-private-key

    - name: fail-on-mq-non-existence
      default: "yes"

    - name: is-source-mqsc-relative-path
      default: config.mqsc
    - name: mq-config-mqsc-relative-path
      default: mqsc

    - name: dockerfile-relative-path-to-infra
      default: Dockerfile

    - name: run-newman-test
      default: "no"

    - name: check-queue
      default: "no"

    - name: key-certs-secret-name
    - name: client-key
    - name: client-cert
    - name: ca-cert

  tasks:
    - name: clone-is-source
      params:
        - name: url
          value: $(params.is-source-repo-url)
        - name: subdirectory
          value: $(params.is-source-directory)
        - name: deleteExisting
          value: "true"
        - name: sshPrivateKey
          value: $(params.is-source-repo-private-key)
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: clone-is-infra
      params:
        - name: url
          value: $(params.is-infra-repo-url)
        - name: subdirectory
          value: $(params.is-infra-directory)
        - name: deleteExisting
          value: "true"
        - name: sshPrivateKey
          value: $(params.is-infra-repo-private-key)
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: clone-is-config
      params:
        - name: url
          value: $(params.is-config-repo-url)
        - name: subdirectory
          value: $(params.is-config-directory)
        - name: deleteExisting
          value: "true"
        - name: sshPrivateKey
          value: $(params.is-config-repo-private-key)
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: resolve-props
      taskRef:
        name: resolve-props
        kind: Task
      runAfter:
        - clone-is-source
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: check-queue
      when:
        - input: "$(tasks.resolve-props.results.check-queue)"
          operator: in
          values: ["yes"]
      taskRef:
        kind: Task
        name: check-queue
      params:
        - name: mq-end-point-policy-file
          value: $(tasks.resolve-props.results.mq-end-point-policy-file)
        - name: mq-queue-name
          value: $(tasks.resolve-props.results.mq-queue-name)
        - name: is-config-directory
          value: $(params.is-config-directory)
        - name: exit-on-fail
          value: $(params.fail-on-mq-non-existence)
      runAfter:
        - clone-is-config
        - resolve-props
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: clone-mq-source
      when:
        - input: "$(tasks.check-queue.results.queue-exists)"
          operator: in
          values: ["no"]
      params:
        - name: url
          value: $(params.mq-source-repo-url)
        - name: subdirectory
          value: $(params.mq-source-directory)
        - name: deleteExisting
          value: "true"
        - name: sshPrivateKey
          value: $(params.mq-source-repo-private-key)
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - check-queue
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: commit-mqsc
      when:
        - input: "$(tasks.check-queue.results.queue-exists)"
          operator: in
          values: ["no"]
      taskRef:
        kind: Task
        name: commit-mqsc
      params:
        - name: is-source-mqsc-path
          value: $(params.is-source-directory)/$(params.is-source-mqsc-relative-path)
        - name: mq-config-mqsc-path
          value: $(params.mq-source-directory)/$(params.mq-config-mqsc-relative-path)
        - name: sshPrivateKey
          value: $(params.mq-source-repo-private-key)
        - name: uid
          value: $(context.pipelineRun.uid)
      runAfter:
        - clone-mq-source
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: generate-bar
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
        - name: is-application-names
          value: $(tasks.resolve-props.results.is-application-names)
        - name: bar-location
          value: $(workspaces.workspace.path)/bars
        - name: bar-filename
          value: $(tasks.resolve-props.results.release-name).bar
      runAfter:
        - resolve-props
      taskRef:
        kind: Task
        name: generate-bar
      workspaces:
        - name: workspace
          workspace: shared-workspace

    - name: build-is-image
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: TLSVERIFY
          value: "false"
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.release-name):$(tasks.clone-is-source.results.commit)
        - name: DOCKERFILE
          value: $(workspaces.source.path)/$(params.is-infra-directory)/$(params.dockerfile-relative-path-to-infra)
        - name: CONTEXT
          value: $(workspaces.source.path)/bars
      runAfter:
        - generate-bar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: deploy-config
      taskRef:
        kind: Task
        name: deploy-config
      params:
        - name: is-config-directory
          value: $(params.is-config-directory)
        - name: is-infra-directory
          value: $(params.is-infra-directory)
        - name: is-configuration-keystore
          value: $(tasks.resolve-props.results.is-configuration-keystore)
        - name: is-configuration-truststore
          value: $(tasks.resolve-props.results.is-configuration-truststore)
        - name: is-configuration-setdbparms
          value: $(tasks.resolve-props.results.is-configuration-setdbparms)
        - name: is-configuration-serverconf
          value: $(tasks.resolve-props.results.is-configuration-serverconf)
        - name: is-configuration-policyproject
          value: $(tasks.resolve-props.results.is-configuration-policyproject)
        - name: is-configuration-loopbackdatasource
          value: $(tasks.resolve-props.results.is-configuration-loopbackdatasource)
      runAfter:
        - resolve-props
        - clone-is-config
        - clone-is-infra
      workspaces:
        - name: workspace
          workspace: shared-workspace

    - name: wait-for-queue
      when:
        - input: "$(tasks.check-queue.results.queue-exists)"
          operator: in
          values: ["no"]
      taskRef:
        kind: Task
        name: check-queue
      params:
        - name: mq-end-point-policy-file
          value: $(tasks.resolve-props.results.mq-end-point-policy-file)
        - name: mq-queue-name
          value: $(tasks.resolve-props.results.mq-queue-name)
        - name: is-config-directory
          value: $(params.is-config-directory)
        - name: number-of-retries
          value: "20"
        - name: exit-on-fail
          value: "yes"
      runAfter:
        - commit-mqsc
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: deploy-is-awaiting-queue
      when:
        - input: "$(tasks.check-queue.results.queue-exists)"
          operator: in
          values: ["no"]
      taskRef:
        kind: Task
        name: deploy-is
      params:
        - name: is-infra-directory
          value: $(params.is-infra-directory)
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.release-name):$(tasks.clone-is-source.results.commit)
        - name: release-name
          value: $(tasks.resolve-props.results.release-name)
        - name: configurations
          value: $(tasks.deploy-config.results.configurations)
        - name: TRACING_NS
          value: $(tasks.resolve-props.results.tracing_ns)
        - name: TRACING_ENABLED
          value: $(tasks.resolve-props.results.tracing_enabled)
      runAfter:
        - wait-for-queue
        - build-is-image
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: deploy-is-queue-exists
      when:
        - input: "$(tasks.check-queue.results.queue-exists)"
          operator: in
          values: ["yes"]
      taskRef:
        kind: Task
        name: deploy-is
      params:
        - name: is-infra-directory
          value: $(params.is-infra-directory)
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.release-name):$(tasks.clone-is-source.results.commit)
        - name: release-name
          value: $(tasks.resolve-props.results.release-name)
        - name: configurations
          value: $(tasks.deploy-config.results.configurations)
        - name: TRACING_NS
          value: $(tasks.resolve-props.results.tracing_ns)
        - name: TRACING_ENABLED
          value: $(tasks.resolve-props.results.tracing_enabled)
      runAfter:
        - deploy-config
        - build-is-image
      workspaces:
        - name: input
          workspace: shared-workspace
    
    - name: functional-test-queue-exists
      when:
        - input: "$(params.run-newman-test)"
          operator: in
          values: ["yes"]
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
        - name: release-name
          value: $(tasks.resolve-props.results.release-name)
        - name: previous-is-genenration
          value: $(tasks.resolve-props.results.previous-is-genenration)
        - name: previous-deployment-revision
          value: $(tasks.resolve-props.results.previous-deployment-revision)
        - name: key-certs-secret-name
          value: $(params.key-certs-secret-name)
        - name: client-key
          value: $(params.client-key)
        - name: client-cert
          value: $(params.client-cert)
        - name: ca-cert
          value: $(params.ca-cert)
      runAfter:
        - deploy-is-queue-exists
      taskRef:
        kind: Task
        name: functional-test
      workspaces:
        - name: workspace
          workspace: shared-workspace

    - name: functional-test-awaiting-queue
      when:
        - input: "$(params.run-newman-test)"
          operator: in
          values: ["yes"]
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
        - name: release-name
          value: $(tasks.resolve-props.results.release-name)
        - name: previous-is-genenration
          value: $(tasks.resolve-props.results.previous-is-genenration)
        - name: previous-deployment-revision
          value: $(tasks.resolve-props.results.previous-deployment-revision)
        - name: key-certs-secret-name
          value: $(params.key-certs-secret-name)
        - name: client-key
          value: $(params.client-key)
        - name: client-cert
          value: $(params.client-cert)
        - name: ca-cert
          value: $(params.ca-cert)
      runAfter:
        - deploy-is-awaiting-queue
      taskRef:
        kind: Task
        name: functional-test
      workspaces:
        - name: workspace
          workspace: shared-workspace
